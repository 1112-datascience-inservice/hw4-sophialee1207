y=2
x=5
x+y
print("Y")
print("N")
print("N")
print("Y")
print("N")
print("Y")
print("N")
print("Y")
print("N")
print("Y")
print("N")
print("Y")
print("N")
df <-c("A","B","C","D","E")
print(names(df))
df <- read.csv("method1.csv") # your code  讀存在f_in變數中的csv檔，並將讀取的檔案內容存放在df變數中
x <- c(1, 2, 3, 4, 5)
# Assigning names using names() function
names(x) <- c("gfg1", "gfg2", "gfg3", "gfg4", "gfg5")
# Printing name vector that is assigned
names(x)
#c(args[(i+1):length(args)], "-")
x <- c("GFG", "gfg", "Geeks", "GEEKS")
#?grep
#?apply
df <- read.csv("method1.csv")
# Printing name vector that is assigned
names(x)
# Printing updated vector
print(x)
#?grep
#?apply
df <- read.csv("method1.csv")
x <- c(1, 2, 3)
name(x)
x <- c(1, 2, 3)
names(x)
x <- c(1, 2, 3)
names(x)
a <- match(names(x),"1")
print(x)
a <- match(names(x),"1")
print(a)
a <- match(names(x),1)
print(a)
x <- c(1, 2, 3)
names(x)
if(match(names(x),1))
print("yes")
if(match(names(x),"1"))
print("yes")
x <- c("aa", "bb", "cc")
names(x)
if(match(names(x),"cc"))
print("yes")
#?grep
#?apply
df <- read.csv("method1.csv")
library(shiny); runApp('C:/Users/user/OneDrive/桌面/政大/03-資料科學/1120427-week11/code06.visual/code06.visual/runApp1.R')
runApp('C:/Users/user/OneDrive/桌面/政大/03-資料科學/1120427-week11/code06.visual/code06.visual/runApp1.R')
runApp('C:/Users/user/OneDrive - National ChengChi University/03-資料科學/HW_study/HW4-DS/HW4')
runApp('C:/Users/user/OneDrive - National ChengChi University/03-資料科學/HW_study/HW4-DS/HW4')
runApp('C:/Users/user/OneDrive - National ChengChi University/03-資料科學/HW_study/HW4-DS/HW4')
runApp('C:/Users/user/OneDrive - National ChengChi University/03-資料科學/HW_study/HW4-DS/hw4-sophialee1207/ggvisExample')
runApp('C:/Users/user/OneDrive - National ChengChi University/03-資料科學/HW_study/HW4-DS/hw4-sophialee1207/ggvisExample')
runApp('C:/Users/user/OneDrive - National ChengChi University/03-資料科學/HW_study/HW4-DS/hw4-sophialee1207/ggvisExample')
runApp('C:/Users/user/OneDrive - National ChengChi University/03-資料科學/HW_study/HW4-DS/hw4-sophialee1207/ggvisExample')
g <- ggbiplot(ir.pca, obs.scale = 1, var.scale = 1, groups = ir.species)
# Load data
data(iris)
head(iris, 3)
# log transform
log.ir <- log(iris[, 1:4])
ir.species <- iris[, 5]
# apply PCA - scale. = TRUE is highly advisable, but default is FALSE.
ir.pca <- prcomp(log.ir,center = TRUE, scale. = TRUE)
print(ir.pca)
# summary method
summary(ir.pca)
# plot method
plot(ir.pca, type = "l")
library(ggbiplot)
## Install necessary packages
install.packages("devtools")
library("devtools")
install.packages("ggvis")
install.packages("ggvis")
install.packages("ggvis")
install.packages("ggvis")
install.packages("ggvis")
install.packages("ggvis")
install.packages("ggvis")
# Load packages
library("ggvis")
# Load packages
library("ggvis")
library("googleVis")
library("rCharts")
library("plotly")
library("dplyr")
library("tidyr")
library("knitr")
library(ggplot2)
library(plyr)
library(shiny)
# Define image sizes
img.width <- 450
img.height <- 300
# Use mtcars data data(mtcars)
mtcars$cyl <- factor(mtcars$cyl)
mtcars$am <- factor(mtcars$am)
# Compute mean mpg per cyl and am
mtcars.mean <- mtcars %>% group_by(mtcars$cyl, mtcars$am) %>% summarise(mpg_mean=mean(mpg)) %>% select(cyl, am, mpg_mean) %>% ungroup()
mtcars.mean <- mtcars %>% group_by(mtcars$cyl, mtcars$am) %>% summarise(mpg_mean=mean(mpg))  %>% ungroup()
mtcars.mean <- mtcars %>% group_by(am) %>% summarise(mpg_mean=mean(mpg)) %>% select(am, mpg_mean) %>% ungroup()
# Histograms
hist.ggplot <- ggplot(mtcars, aes(x=mpg)) + geom_histogram(binwidth=1)
hist.ggplot
hist.ggvis <- mtcars %>% ggvis(x = ~mpg) %>% layer_histograms(width=1) %>%
set_options(width = img.width, height = img.height)
hist.ggvis
# Scatter plots
scatter.ggplot <- ggplot(mtcars, aes(x=wt, y=mpg)) + geom_point()
scatter.ggplot
scatter.ggvis <- mtcars %>% ggvis(x = ~wt, y = ~mpg) %>% layer_points() %>%
set_options(width = img.width, height = img.height)
scatter.ggvis
mtcars %>% ggvis(~wt, ~mpg) %>% layer_points() %>%
layer_model_predictions(model = "lm", se = TRUE)
# Scatter plots by group
scatter.ggplot <- ggplot(mtcars, aes(x=wt, y=mpg, colour=cyl)) +
geom_point()
scatter.ggplot
scatter.ggvis <- mtcars %>% ggvis(x = ~wt, y = ~mpg, fill = ~cyl) %>%
layer_points() %>% set_options(width = img.width, height = img.height)
scatter.ggvis
mtcars %>%
ggvis(~wt, ~mpg, fill = ~factor(cyl)) %>%
layer_points() %>%
group_by(cyl) %>%
layer_model_predictions(model = "lm", se = TRUE)
# Line plots
line.ggplot <- ggplot(mtcars.mean, aes(x=cyl, y=mpg_mean, colour=am)) + geom_line(aes(group=am))
line.ggplot
line.ggvis <- mtcars.mean %>% ggvis(x = ~cyl, y = ~mpg_mean, stroke = ~am) %>% layer_lines() %>% set_options(width = img.width, height = img.height)
line.ggvis
# ggvis
# plot1
p <- ggvis(mtcars, x = ~wt, y = ~mpg)
layer_points(p)
# plot2
layer_points(ggvis(mtcars, x = ~wt, y = ~mpg))
# plot3
mtcars %>% ggvis(x = ~wt, y = ~mpg) %>% layer_points()
# why %>%
mtcars %>%
ggvis(x = ~mpg, y = ~disp) %>%
mutate(disp = disp / 61.0237) %>% # convert engine displacment to litres
layer_points()
# Simple, which include primitives like points, lines and rectangles.
mtcars %>% ggvis(~wt, ~mpg) %>% layer_points()
# Compound, which combine data transformations with one or more simple layers.
mtcars %>% ggvis(~mpg) %>% layer_histograms()
# Multiple layers
mtcars %>% ggvis(~wt, ~mpg) %>% layer_smooths() %>%
layer_points()
# original density computes kernel density estimates
plot(density(mtcars$wt))
plot(density(mtcars$wt, kernel="rectangular"))
plot(density(mtcars$wt, kernel="gaussian"))
plot(density(mtcars$wt, kernel="epanechnikov"))
# interactive density plot
mtcars %>% ggvis(x = ~wt) %>%
layer_densities( adjust = input_slider(.1, 2, value = 1, step = .1, label = "Bandwidth adjustment"),
kernel = input_select( c("Gaussian" = "gaussian", "Epanechnikov" = "epanechnikov", "Rectangular" = "rectangular", "Triangular" = "triangular", "Biweight" = "biweight", "Cosine" = "cosine", "Optcosine" = "optcosine"), label = "Kernel") )
mtcars %>% ggvis(~mpg, ~disp, size = ~vs) %>%
layer_points()
mtcars %>% ggvis(~wt, ~mpg, size := 300, opacity := 0.4) %>%
layer_points()
mtcars %>% ggvis(~wt, ~mpg, size := input_slider(10, 100), opacity := input_slider(0, 1) ) %>%
layer_points()
slider <- input_slider(10, 1000)
mtcars %>% ggvis(~wt, ~mpg) %>%
layer_points(fill := "red", opacity := 0.5, size := slider)
keys_s <- left_right(10, 1000, step = 50)
mtcars %>% ggvis(~wt, ~mpg, size := keys_s, opacity := 0.5) %>%
layer_points()
installr::updateR(keep_install_file=TRUE)
install::updateR(keep_install_file=TRUE)
library("ggplot2")
# won???t supply those names. That saves typing, and, by reducing the amount of boilerplate, makes it easier to see what???s different between plots
ggplot(data = faithful, mapping = aes(x = eruptions)) +
geom_freqpoly(binwidth = 0.25)
ggplot(faithful, aes(eruptions)) +
geom_freqpoly(binwidth = 0.25)
runApp('C:/Users/user/OneDrive - National ChengChi University/03-資料科學/HW_study/HW4-DS/hw4-sophialee1207/ggvisExample')
## Install necessary packages
install.packages("devtools")
library("devtools")
install.packages("ggvis")
## Install necessary packages
install.packages("devtools")
library("devtools")
install.packages("ggvis")
# Load packages
library("ggvis")
library("googleVis")
library("rCharts")
install.packages("googleVis")
library("googleVis")
## Install necessary packages
install.packages('remotes', dependencies = TRUE)
install.packages("remotes", dependencies = TRUE)
remotes::install_github("vqv/ggbiplot")
data(iris)
# Load data
data(iris)
head(iris, 3)
# log transform
log.ir <- log(iris[, 1:4])
ir.species <- iris[, 5]
# apply PCA - scale. = TRUE is highly advisable, but default is FALSE.
ir.pca <- prcomp(log.ir,center = TRUE, scale. = TRUE)
print(ir.pca)
print(ir.pca)
# summary method
summary(ir.pca)
# plot method
plot(ir.pca, type = "l")
library(ggbiplot)
## Install necessary packages
install.packages('remotes', dependencies = TRUE)
install.packages("remotes", dependencies = TRUE)
remotes::install_github("vqv/ggbiplot")
## Install necessary packages
install.packages('remotes', dependencies = TRUE)
install.packages("remotes", dependencies = TRUE)
remotes::install_github("vqv/ggbiplot")
## Install necessary packages
install.packages('remotes', dependencies = TRUE)
install.packages("remotes", dependencies = TRUE)
remotes::install_github("vqv/ggbiplot")
shiny::runApp('C:/Users/user/OneDrive - National ChengChi University/03-資料科學/HW_study/HW4-DS/hw4-sophialee1207/ggvisExample')
runApp('C:/Users/user/OneDrive - National ChengChi University/03-資料科學/HW_study/HW4-DS/hw4-sophialee1207/ggvisExample')
runApp('C:/Users/user/OneDrive - National ChengChi University/03-資料科學/1120427-week11/code06.visual/code06.visual/runApp1.R')
library(dplyr)
library(nycflights13)
not_cancelled <- flights %>%
filter(!is.na(dep_delay), !is.na(arr_delay))
not_cancelled %>%
group_by(year, month, day) %>%
summarise(mean = mean(dep_delay))
runApp('C:/Users/user/OneDrive - National ChengChi University/03-資料科學/HW_study/HW4-DS/hw4-sophialee1207/ggvisExample')
runApp('C:/Users/user/OneDrive - National ChengChi University/03-資料科學/HW_study/HW4-DS/hw4-sophialee1207/ggvisExample')
runApp('C:/Users/user/OneDrive - National ChengChi University/03-資料科學/HW_study/HW4-DS/hw4-sophialee1207/ggvisExample')
runApp('C:/Users/user/OneDrive - National ChengChi University/03-資料科學/HW_study/HW4-DS/hw4-sophialee1207/ggvisExample')
## Install necessary packages
install.packages('remotes', dependencies = TRUE)
install.packages("remotes", dependencies = TRUE)
remotes::install_github("vqv/ggbiplot")
data(iris)
# log transform
log.ir <- log(iris[, 1:4])
source("C:/Users/user/OneDrive - National ChengChi University/03-資料科學/HW_study/HW4-DS/hw4-sophialee1207/app.R")
data(iris)
# log transform
log.ir <- log(iris[, 1:4])
ir.species <- iris[, 5]
# apply PCA - scale. = TRUE is highly advisable, but default is FALSE.
ir.pca <- prcomp(log.ir,center = TRUE, scale. = TRUE)
library(ggbiplot)
g <- ggbiplot(ir.pca, obs.scale = 1, var.scale = 1, groups = ir.species)
g <- g + scale_color_discrete(name = '')
g <- g + theme(legend.direction = 'horizontal', legend.position = 'top')
print(g)
shiny::runApp('C:/Users/user/OneDrive - National ChengChi University/03-資料科學/HW_study/HW4-DS/hw4-sophialee1207/111971018')
runApp('C:/Users/user/OneDrive - National ChengChi University/03-資料科學/HW_study/HW4-DS/hw4-sophialee1207/111971018')
runApp('C:/Users/user/OneDrive - National ChengChi University/03-資料科學/HW_study/HW4-DS/hw4-sophialee1207/111971018')
runApp('C:/Users/user/OneDrive - National ChengChi University/03-資料科學/HW_study/HW4-DS/hw4-sophialee1207/111971018')
runApp('C:/Users/user/OneDrive - National ChengChi University/03-資料科學/HW_study/HW4-DS/hw4-sophialee1207/111971018')
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
